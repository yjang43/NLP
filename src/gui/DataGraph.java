package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;
import javax.swing.event.*;
import dataProcess.*;
import fileInputParse.FileParse;
import fileInputParse.FileRead;


/**
 * This class simulates data input from RS-232 and present the value in GUI
 * @author jang
 *
 */
public class DataGraph extends JPanel {
  
  private DefaultListModel<Integer> xSet;
  private DefaultListModel<Integer> ySet;
  private JButton btn;
  private Random rnd = new Random();
  int x = 0;
  int y = 200;
  int z = 100;
  private static final int SCREEN_WIDTH = 2000;
  private static final int SCREEN_HEIGHT = 1000;
  private static final int SD_VALUE = 30;
  private ArrayList<Double> arr;
  /**
   * data initialization and create button
   */
  public DataGraph(ArrayList<Double> arr) {
    super(new BorderLayout());
    this.arr = arr;
    xSet = new DefaultListModel<Integer>();
    ySet = new DefaultListModel<Integer>();
    xSet.addElement(SCREEN_WIDTH / 2);
    ySet.addElement(SCREEN_HEIGHT / 2);
    // will there really be a need for two separate listener?
    // NO because when there is a change to either x or y,
    // we can assume the other value changed as well
    xSet.addListDataListener(new MyListDataListener());
    
    btn = new JButton("generate number");
    btn.setActionCommand("generate number");
//    btn.addActionListener(new GenerateButtonListener());
    add(btn, BorderLayout.PAGE_START);
  }
  public Dimension getPreferredSize() {
    return new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT);
}
  
  /**
   * for every update, draw all the lines receiving data from the set
   */
  public void paintComponent(Graphics g) {
    super.paintComponent(g);
    
// // draw line when x, y set changes size
//    if(xSet.size() > 1) {
//      for(int i = 1; i < xSet.size(); i++) {
//        int prevX = xSet.elementAt(xSet.size() - i - 1);
//        int curX = xSet.elementAt(xSet.size() - i);
//        int prevY = ySet.elementAt(ySet.size() - i - 1);
//        int curY = ySet.elementAt(ySet.size() - i);
//        g.drawLine(prevX, prevY, curX, curY);
//      }
    g.drawLine(0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2);
    for(int i = 0; i < arr.size() - 1; i++) {
      int width = i * 2;
      g.drawLine(width, (int)(- arr.get(i) * 1000.0 + (double)SCREEN_HEIGHT / 2),
          width + 2, (int)(- arr.get(i + 1) * 1000.0 + (double)SCREEN_HEIGHT / 2));
    }
  }
  
  /**
   * when button is clicked add number generated by Gaussian number generator and put the
   * value into set
   * @author jang
   *
   */
//  class GenerateButtonListener implements ActionListener {
//    public void actionPerformed(ActionEvent e) {
//      int xVal = 
//          (int) StandardDeviationRandom.standardDeviationGenerator(SCREEN_WIDTH/2, SD_VALUE);
//      // rnd.nextInt(SCREEN_WIDTH);     // value from random number generator
//      System.out.println("numX generated value: " + xVal);
//      int yVal = 
//          (int) StandardDeviationRandom.standardDeviationGenerator(SCREEN_HEIGHT/2, SD_VALUE);
//      // rnd.nextInt(SCREEN_HEIGHT);     // temporary value = 0
//      System.out.println("numY generated value: " + yVal);
//      xSet.addElement(xVal);
//      ySet.addElement(yVal);
//    }
//  }
 
  /**
   * update GUI when there is a change to the number of elements in the set
   * @author jang
   *
   */
  class MyListDataListener implements ListDataListener {
    public void contentsChanged(ListDataEvent e) {

    }
    public void intervalAdded(ListDataEvent e) {
      
      System.out.println("intervalAdded ");
      repaint();
    }
    public void intervalRemoved(ListDataEvent e) {

    }
  }
  
  /**
   * pack components into a frame
   */
  private static void createAndShowGUI() {
// init here
    
    FileParse parser = new FileParse
        (FileRead.read("/Users/jang/eclipse-workspace/java/DataProcessing/src/data.txt"));
    parser.parse();
    Language lng = new Language();
    lng.addUniqueWord(parser.getFileSet());
    for(int i = 0; i < lng.getWordSet().size(); i++) {
      System.out.printf("\t%s", lng.getWordSet().get(i));
    }
    System.out.println();
    Node tmp = new Node();
    tmp.resize();
    tmp.input(parser.getFileSet());
    Idea idea = new Idea();
    idea.resize();
    idea.input(parser.getFileSet());
    for(int i = 0; i < idea.idea.size(); i++) {
      if(idea.idea.get(10).get(i) != 0.0) System.out.printf("\t%f", idea.idea.get(10).get(i));
    }
    System.out.println();
    System.out.println(idea.idea.get(4).get(4));
    
    
    // init ends
    
      System.out.println("created " + SwingUtilities.isEventDispatchThread());
      JFrame f = new JFrame("DataToLine");
      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      JComponent newContentPane = new DataGraph(idea.idea.get(3));
      newContentPane.setOpaque(true); //content panes must be opaque
      f.setContentPane(newContentPane);
      f.pack();
      f.setVisible(true);
  }
  
  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
        
        @Override
        public void run() {
            // TODO Auto-generated method stub
            createAndShowGUI();
        }
    });
  }
}

  
